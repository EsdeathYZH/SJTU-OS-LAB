1.Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S? 
Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.

A:Because mpentry.S is linked at somewhere above KERNBASE, but we load it at MPENTRY_PADDR but not {symbol address} - KERNBASE, so we use MPBOOTPHYS macro to calculate every symbol's PA in mpentry.S but not RELOC macro.

2.It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

A:Imagine this scenario, two CPU trap from user mode at the same time and CPU A executes alltraps function, enters into trap function and acquires the kernel lock. And then CPU B executes alltraps function, which breaks down kernel stack because of push operations. In this scenario CPU A could not return back normally.

3.In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context--the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

A: Because the pointer e points to a Env structure which is stored in kernel (above KERNBASE). And the part of page table above KERNBASE for every environment is same. So it can be dereferenced both before and after the addressing switch.

4.Whenever the kernel switches from one environment to another, it must ensure the old environment's registers are saved so they can be restored properly later. Why? Where does this happen?

A: Because environments need to save their running context when switching, and the context includes registers resource which will be used by new environment. otherwise we can not resume execution from last endpoint. This operation happens in function trap which we copy the trap frame (which is currently on the stack) into 'curenv->env_tf', so that the environment will restart at the trap point when we resume it.
